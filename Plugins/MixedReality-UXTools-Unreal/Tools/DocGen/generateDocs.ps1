# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
<#
.SYNOPSIS
    Script to generate the docs into doc folder
.DESCRIPTION
    Generates API reference in markdown format.
    Converts all markdown documentation into html that can be hosted on GitHub Pages.
.NOTES
    Requires the following tools to be in the PATH:
        - Doxygen
        - Doxybook2
        - Python 3
        - DocFX
.PARAMETER Serve
    Serve the generated docs on a temporary web server @ localhost
    The docs are not completely static, so will not work if not served.
.PARAMETER Debug
    Keep intermediate folders.
#>
param(
    [switch]$serve = $false,
    [switch]$debug = $false
)


function Get-PythonExe {
    process {
        $Pythons = @()
        @("py", "python3", "python") | ForEach-Object {
            if (Get-Command -Name $_ -ErrorAction SilentlyContinue)
            {
                $Pythons += $_
            }
        }
        if ($Pythons.Length -eq 0)
        {
            throw "Could not find Python"
        }
        return $Pythons[0]
    }
}

$DoxygenOutDir = "xml"
$PostDoxygenOutDir = "xml_out"
$DoxybookOutDir = "api_tmp"
$FinalOutDir = "api"


function Remove-GeneratedDirs {
    [CmdletBinding()]
    param (
        [bool] $KeepIntermediateFolders = $False,
        [bool] $KeepOutput = $False
    )
    process {
        Push-Location $PSScriptRoot\..\..

        $DirsToRemove = @()
        
        if (-not $KeepIntermediateFolders)
        {
            $DirsToRemove = @($DoxygenOutDir, $PostDoxygenOutDir, $DoxybookOutDir)
        }
        if (-not $KeepOutput)
        {
            $DirsToRemove += $FinalOutDir
        }
        $DirsToRemove | ForEach-Object {
            if (Test-Path -Path $_)
            {
                Write-Host "Removing $_"
                Remove-Item -Recurse -Force -Path $_
            }
        }

        Pop-Location
    }
}

<#
.SYNOPSIS
    Generate API reference from C++ files
#>
function Create-APIMarkdown {
    process {
        # Change working dir to the root of the repo
        Push-Location $PSScriptRoot\..\..

        try
        {
            Write-Host "# Remove any intermediate directories left over from previous runs"
            Remove-GeneratedDirs

            $Python = $(Get-PythonExe)

            Write-Host "# Run Doxygen - generate output in xml folder"
           . doxygen.exe .\Tools\ApiGen\Doxyfile --output $DoxygenOutDir
           if ($LASTEXITCODE -ne 0)
           {
               throw "Doxygen finished with errors."
           }

            Write-Host "# Transform xml generated by Doxygen"
            Write-Host "Python interpreter is: $Python"
            . $Python .\Tools\ApiGen\scripts\post_doxygen.py $DoxygenOutDir --output $PostDoxygenOutDir
            if ($LASTEXITCODE -ne 0)
            {
                throw "Post-Doxygen script finished with errors."
            }
 
            Write-Host "Run Doxybook2"
            New-Item -ItemType Directory -Path $DoxybookOutDir
            . doxybook2.exe --config .\Tools\ApiGen\doxybook2.json --templates .\Tools\ApiGen\templates --input $PostDoxygenOutDir --output $DoxybookOutDir --debug-templates
            if ($LASTEXITCODE -ne 0)
            {
                throw "Doxybook finished with errors."
            }
 
            Write-Host "# Fix up markdown generated by Doxybook2"
            Write-Host "Python interpreter is: $Python"
            . $Python .\Tools\ApiGen\scripts\post_doxybook.py $DoxybookOutDir --output $FinalOutDir
            if ($LASTEXITCODE -ne 0)
            {
                throw "Post-Doxybook script finished with errors."
            }
         }
        finally {
            Pop-Location
        }
    }
}

try
{
    Create-APIMarkdown -ErrorAction Stop
}
catch
{
    Write-Host -ForegroundColor Red "Errors while generation API reference"
    throw
}

Push-Location (Split-Path $MyInvocation.MyCommand.Path)

# Clear output dir
Write-Host "Deleting previously generated doc folder"
Remove-Item -Force -Recurse -ErrorAction Ignore .\doc

# Generate website via docfx
$errors = 0
$output = ""
try
{
    Invoke-Expression "docfx -f" | Tee-Object -Variable output | Write-Host
}
catch
{
    # Could not run DocFX, e.g. not in PATH
    $errors = 1
    throw
}
$results = $output | Out-String
if ($results -match "(?<warningCount>\d*) Warning\(s\)\s*(?<errorCount>\d*) Error\(s\)")
{
    if ($Matches.errorCount -gt 0 -or $Matches.warningCount -gt 0)
    {
        Write-Host "Broken reference found in documentation - Build validation failed." -ForegroundColor red
		$errors = 1;
    }
}
if (($LASTEXITCODE -ne 0) -or ($results -match "Unhandled exception:"))
{
    # processing errors or DocFX crash (e.g. DLL dependency missing)
    Write-Host -ForegroundColor Red "DocFX finished with errors."
    $errors = 1
}

if ($errors -eq 0)
{
	Write-Host "Success! Documentation generated in doc folder" -ForegroundColor green
}

#delete temp folders
Write-Host "Deleting temp folders"
Remove-GeneratedDirs -KeepOutput $True -KeepIntermediateFolders $Debug

Write-Host "Deleting docfx obj folder"
Remove-Item -Force -Recurse -ErrorAction Ignore .\obj

# optional serve on localhost
if ($serve)
{
	start 'http://localhost:8080'
	docfx serve doc
}

Pop-Location

exit $errors